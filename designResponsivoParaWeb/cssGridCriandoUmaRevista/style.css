/*
* Para iniciar seu CSS, normalize as regras do CSS tendo como destino todos os elementos com *, incluindo os pseudosseletores ::before e ::after.

Defina as propriedades padding e margin como 0 e defina a propriedade box-sizing como border-box.

* Crie um seletor html e dê a ele uma propriedade font-size definida como 62.5%. Isto definirá o tamanho padrão da fonte para a página da web como 10px (o padrão do navegador é 16px).

Isto facilitará para você trabalhar com unidades rem mais tarde, já que 2rem seria 20px.

* 32. Agora você está pronto para começar a montar o layout da grade. O CSS Grid oferece um layout baseado em uma grade bidimensional, permitindo que você centralize itens horizontalmente e verticalmente enquanto ainda mantém o controle para fazer coisas como sobrepor elementos.

Comece criando um seletor main e dando a ele a propriedade display definida como grid.

* 33. Agora você pode estilizar o layout da sua grade. CSS Grid é similar ao Flexbox, na medida em que possui uma propriedade especial para os elementos pai quanto para os elementos filhos.

Neste caso, o elemento pai é o elemento main. Defina o conteúdo para ter um layout de três colunas adicionando a propriedade grid-template-columns com o valor de 1fr 94rem 1fr. Isso criará três colunas onde a coluna do meio tem 94rem de largura e as primeiras e últimas colunas são ambas 1 fração do espaço restante no contêiner da grade.

* 34. Use a função minmax para tornar suas colunas responsivas em qualquer dispositivo. A função minmax recebe dois argumentos, sendo o primeiro o valor mínimo e o segundo o máximo. Esses valores podem ser um comprimento, porcentagem, fr ou até mesmo uma palavra-chave como max-content.

Envolva cada um dos seus valores já definidos da propriedade grid-template-columns em uma função minmax, usando cada valor como o segundo argumento. O primeiro argumento deve ser 2rem, min-content e 2rem, respectivamente.

* 35. Para adicionar espaço entre as linhas no layout de grade, você pode usar a propriedade row-gap. Dê ao seletor main a propriedade row-gap definida como 3rem.

* 36. A revista terá três seções primárias. Você já definiu o layout geral na regra main, mas pode ajustar o posicionamento nas regras dos elementos filhos.

Uma opção é a propriedade grid-column, que é a propriedade abreviada de grid-column-start e grid-column-end. A propriedade grid-column informa ao item de grade em qual linha de grade começar e terminar.

Crie uma regra .heading e defina a propriedade grid-column como 2 / 3. Isso dirá ao elemento .heading para começar na linha de grade 2 e terminar na linha de grade 3.

* 37. Crie um seletor .text e dê a ele uma propriedade grid-column definida como 2 / 3.

* 39. A função CSS repeat() é usada para repetir um valor, em vez de escrevê-la manualmente, e é útil para layouts de grade. Por exemplo, definindo a propriedade grid-template-columns para repeat(20, 200px) criaria 20 colunas a cada 200px de largura.

Dê ao elemento .heading uma propriedade de grid-template-columns definida como repeat(2, 1fr) para criar duas colunas de igual largura.

* 41.
Lembre-se de que a propriedade grid-column determina em quais colunas um elemento começa e termina. Pode haver momentos em que você não terá a certeza de quantas colunas a grade terá, mas você quer um elemento que pare na última coluna. Para fazer isso, você pode usar -1 para a coluna final.

Crie um seletor .hero e dê a ele a propriedade grid-column definida como 1 / -1. Isto dirá ao elemento para abranger toda a largura da grade.


* 44. Crie um seletor img e dê a ele a propriedade width definida como 100% e a propriedade object-fit definida como cover.

A propriedade object-fit diz ao navegador como posicionar o elemento dentro do contêiner. Nesse caso, cover definirá a imagem para preencher o contêiner, recortando conforme necessário para evitar alterar a proporção.

* 46. A legenda também precisa ser estilizada. Crie um seletor .hero-subtitle e dê a ele a propriedade font-size com 2.4rem, a propriedade color definida com orangered e a propriedade text-align definida com center.

*  46. Crie um seletor .author-name a:hover e dê a ele a propriedade background-color definida como #306203.

Isto criará um efeito de pairar somente para o elemento a dentro do .author-name, mostrando o verde original do freeCodeCamp em segundo plano.

* 51. As configurações padrão para o CSS Grid criarão linhas adicionais, conforme necessário, ao contrário do Flexbox. Dê ao seletor .social-icons a propriedade grid-template-columns definida como repeat(5, 1fr) para organizar os ícones em uma única linha.

* 52. Se você quiser adicionar mais ícones sociais, mas mantê-los na mesma linha, você precisa atualizar grid-template-columns para criar colunas adicionais. Como alternativa, você pode usar a propriedade grid-auto-flow.

Essa propriedade recebe row ou column como o primeiro valor, com um segundo valor opcional de dense. grid-auto-flow usa um algoritmo de posicionamento automático para ajustar o layout de grade. Defini-lo como column dirá ao algoritmo para criar colunas para o conteúdo conforme necessário. O valor dense permite que o algoritmo reveja seus passos e preencha os espaços na grade com itens menores, o que pode fazer com que os itens apareçam fora de ordem.

Para o seletor .social-icons, defina a propriedade grid-auto-flow como column.


*/

*, ::before, ::after {
    padding: 0px;
    margin: 0px;
    box-sizing: border-box; 
}

body {
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
  }

  h1 {
    font-family: Anton, sans-serif;
  }

  h2, h3, h4, h5, h6 {
    font-family: Raleway, sans-serif
  }

  a {
    text-decoration: none;
    color: linen;
  }

  main {
    display: grid;    /*32*/
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);  /*33,34*/
    row-gap: 3rem;     /*35*/
  }

  .heading {
    grid-column: 2 / 3;  /*36*/
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
  }

  .text {
    grid-column: 2 / 3;   /*37*/
  }

  .hero {
    grid-column: 1 / -1;   /*41*/
    position: relative;
  }
  
  img {
    width: 100%;
    object-fit: cover;
  }

  .hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
  }

  .hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
  }

  .author {
    font-size: 2rem;
    font-family: Raleway, sans-serif;
  }

  .author-name a:hover {
    background-color: #306203;
  }

  .publish-date {
    color: rgba(255, 255, 255, 0.5);
  }

  .social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
  }