/* 

(28)
Hora de estilizar a sua tabela. Comece redefinindo o modelo de caixa. 
Crie um seletor html e dê a ele uma propriedade box-sizing definida como border-box.

(29)
Crie um seletor body e dê a ele a propriedade font-family definida como sans-serif e a propriedade color definida como #0a0a23.


(30)
Antes de irmos muito mais longe na estilização, devemos usar a classe sr-only. 
Você pode usar o CSS para tornar os elementos dessa classe completamente ocultos na página visual, 
mas ainda podendo ser anunciados pelos leitores de tela.

O CSS que você está prestes a escrever é um conjunto comum de propriedades usadas para garantir que os elementos 
estejam completamente ocultos visualmente.

O seletor span[class~="sr-only"] selecionará qualquer elemento span cujo atributo class inclua sr-only. 
Crie esse seletor e dê a ele uma propriedade border definida como 0.

(31)
A propriedade clip do CSS é usada para definir porções visíveis de um elemento. 
Defina o seletor span[class~="sr-only"] para que tenha uma propriedade clip de rect(1px, 1px, 1px, 1px).

A propriedade clip-path determina a forma que a propriedade clip receberá. 
Defina a propriedade clip-path para que tenha o valor inset(50%), deixando o clip-path na forma de um retângulo dentro do elemento.

(32)
Agora, você precisa reduzir esses elementos. 
Dê ao seletor span[class~="sr-only"] as propriedades width e height definidas como 1px.

(33)
Para evitar que o conteúdo do texto exceda os limites, dê ao seletor span[class~="sr-only"] 
uma propriedade overflow definida como hidden e uma propriedade white-space definida como nowrap.


(34)
Por último, é necessário retirar estes elementos ocultos do fluxo do documento. Dê ao seletor span[class~="sr-only"] 
a propriedade position definida como absolute, a propiedade padding definida como 0 e a propriedade margin definida como -1px. 
Isso garantirá que não somente eles deixaram de ser visíveis, como também não estarão sequer na exibição de página.

(35)
Hora de estilizar o cabeçalho da tabela. Crie um seletor h1. Dê a ele uma propriedade max-width definida como 37.25rem, 
uma propriedade margin definida como 0 auto e uma propriedade padding definida como 1.5rem 1.25rem.

(36)
Selecione o contêiner flex com um seletor h1 .flex. Dê a ele uma propriedade display definida como flex para ativar o layout do flexbox. 
Então, defina a propriedade flex-direction como column-reverse - isso exibirá os elementos aninhados da parte inferior para a superior. 
Por fim, defina a propriedade gap como 1rem para fornecer mais espaçamento entre os elementos.

(37)
O pseudosseletor :first-of-type é utilizado para focar no primeiro elemento que corresponde ao seletor. 
Crie um seletor h1 .flex span:first-of-type para escolher o primeiro elemento span no contêiner .flex. 
Lembre-se de que os elementos span estão invertidos visualmente, então esse parecerá ser o segundo elemento na página.

Dê ao novo seletor uma propriedade font-size de 0.7em para que ele pareça com um subtítulo.

(38)
O pseudosseletor :last-of-type é utilizado para focar exatamente o oposto: o último elemento que corresponde ao seletor. 
Crie um seletor h1 .flex span:last-of-type para focar no último span em seu contêiner flex 
e dê a ele uma propriedade font-size definida como 1.2em para que se pareça com um cabeçalho.

(39)
Você envolveu a tabela em um elemento de seção - agora você pode estilizá-la para dar a ela uma borda. 
Crie um seletor section e dê a ele uma propriedade max-width definida como 40rem para deixar o design responsivo. 
Defina a propriedade margin como 0 auto para centralizá-la e defina a propriedade border como 2px solid #d0d0d5.

(40)
A última parte da tabela são os anos. Crie um seletor #years e ative o flexbox. 
Justifique o conteúdo para o final da direção do flex e faça com que o elemento permaneça no lugar. 
Prenda o elemento na parte superior do contêiner com top: 0.

(41)
Agora, aplique uma cor a #years. Dê ao texto a cor #fff e o fundo #0a0a23.

(42)
A função calc() é uma função do CSS que permite calcular um valor baseado em outros valores. 
Por exemplo, você pode usá-la para calcular a largura da viewport menos a margem de um elemento:

.example {
  margin: 10px;
  width: calc(100% - 20px);
}

Dê ao elemento #years uma margin de 0 -2px e um padding definido como 0.5rem calc(1.25rem + 2px) 0.5rem 0.

(43)
Adicionar a position sticky moveu o elemento para sua própria pilha. 
Para garantir que seu elemento #years não fique escondido por pilhas diferentes, 
adicione uma propriedade z-index definida como 999 na regra #years.

(44)
Estilize o texto dentro do elemento #years criando um seletor #years span[class]. 
A sintaxe span[class] terá como destino qualquer elemento span que tenha um atributo class definido, 
independentemente do valor do atributo.

Dê ao novo seletor uma fonte bold, uma largura de 4.5rem e texto alinhado à direita.

(45)
Você envolveu as suas tabelas em um contêiner com a classe table-wrap. 
Crie um seletor para aquela classe e dê a ela um padding definido como 0 0.75rem 1.5rem 0.75rem.

(46)
Antes de começar a entrar em detalhes na tabela, os elementos span estão atualmente em negrito. 
Crie um seletor span:not(.sr-only) e dê a ele uma propriedade font-weight definida como normal.

O pseudosseletor :not() é usado para direcionar todos os elementos que não coincidem com o seletor - neste caso, 
qualquer dos elementos span que não possua a classe sr-only. 
Isso garante que as regras anteriores para o seletor span[class~="sr-only"] não sejam substituídas.

(47)
Ao invés de ter que verificar constantemente se você não está substituindo as propriedades anteriores, 
você pode usar a palavra-chave !important para garantir que essas propriedades sejam sempre aplicadas, 
independentemente da ordem ou da especificidade.

Dê a cada propriedade do seletor span[class~="sr-only"] uma palavra-chave !important. Não altere nenhum dos valores.

(48)
Agora que você adicionou a palavra-chave !important, você pode remover o :not(.sr-only) do seletor span.

(49)

Crie um seletor table para utilizar com as tabelas. Defina a propriedade border-collapse como collapse, 
o que permitirá que as bordas das células se recolham em uma única borda, 
em vez de uma borda em torno de cada célula. Defina também a propriedade border como 0 para ocultar as bordas.

(50)
Certifique-se de que sua tabela preencha o contêiner com uma propriedade width definida como 100%, 
então posicione-a relativamente e dê a ela uma margem superior de 3rem.

(51)
Em seguida, você precisa estilizar os elementos caption para que se pareçam mais com cabeçalhos. 
Criar um seletor table caption. Defina o texto para que tenha uma cor #356eaf, um tamanho de 1.3em e um peso normal.

(52)
Agora, dê às legendas uma posição absoluta e desloque-as -2.25rem da parte superior e 0.5rem da esquerda.

(53)
Crie um seletor com foco nos elementos td dentro do corpo da tabela. Dê a eles uma largura para preencher a viewport, 
com um mínimo e máximo de 4rem. Essa abordagem garante que a largura seja fixa, 
enquanto configurar width permitiria especificamente aos elementos encolherem de acordo com o contêiner.

(54)
Agora, coloque em foco os elementos th dentro do corpo da tabela e dê a eles a largura do contêiner inteiro menos 12rem.
O seletor tbody th deve ter a propriedade width definida como calc(100% - 12rem)

(55)
O seletor [attribute="value"] visa qualquer elemento que tenha um atributo com um valor específico. 
Crie um seletor tr[class="total"] para focar especificamente nos elementos tr com a classe total. 
Dê a ele uma borda inferior de 4px double #0a0a23 e deixe a fonte em negrito.

(56)
Usando a mesma sintaxe de seletor, tenha como alvo os elementos th dentro das linhas da tabela onde a class é total. 
Alinha o texto à esquerda e dê-lhes um espaçamento de 0.5rem 0 0.25rem 0.5rem.

(57)
A diferença principal entre tr[class="total"] e tr.total é que o primeiro 
selecionará os elementos tr onde a classe for apenas total. 
O segundo selecionará os elementos tr em que a(s) class(es) incluam total.

Nesse caso, tr.total servirá. Você pode usar esse seletor com foco nos elementos td dentro das linhas .total. 
Alinha o texto à esquerda e dê a eles um preenchimento (padding) de 0 0.25rem.

(58)
O pseudosseletor :nth-of-type() é usado para focar em elementos específicos com base em sua ordem entre irmãos do mesmo tipo. 
Use esse pseudosseletor com foco no terceiro elemento td dentro das linhas da tabela total. 
Dê a ele um preenchimento (padding) de 0.5rem.

Você deve ter um seletor tr.total td:nth-of-type(3).

(59)
Dê aos elementos tr.total um efeito ao passar o mouse sobre eles que altera o fundo para #99c9ff.

(60)
Selecione os elementos td com o valor de class current e deixe a fonte em itálico.

(61)
Selecione os elementos tr com a class definida como data. Dê a eles uma imagem de fundo de linear-gradient(to bottom, 
#dfdfe2 1.845rem, white 1.845rem).

(62)
Os elementos span agora têm estilos mais específicos, o que significa que você pode remover a regra para span.

(65)
Os valores em dólar estão desalinhados no momento. Crie um seletor com foco nos elementos td dentro dos elementos tr.data. 
Alinhe verticalmente o texto na parte superior, alinhe o texto horizontalmente à direita e defina o preenchimento (padding) como 0.3rem 0.25rem 0.

(66)
Crie outro seletor para os elementos td dentro do elemento tr.data, mas selecione especificamente o último. 
Dê a ele um preenchimento (padding) à direita de 0.5rem.

Com isso, o balanço patrimonial está completo!

*/

span[class~="sr-only"]{           
  border: 0 !important;                                  /*30, 47*/
  clip: rect(1px, 1px, 1px, 1px) !important;             /*31, 47*/
  clip-path: inset(50%) !important;                      /*31,47*/
  height: 1px !important;                                /*32, 47*/                     
  width: 1px !important;                                 /*32, 47*/  
  position: absolute !important;                         /*34, 47*/
  overflow: hidden !important;                           /*33, 47*/
  white-space: nowrap !important;                        /*33, 47*/
  padding: 0 !important;                                 /*34, 47*/
  margin: -1px !important;                               /*34, 47*/

}

html{
    box-sizing: border-box;         /*28*/
}

body{
    font-family: sans-serif;      /*29*/     
    color: #0a0a23;             /*29*/
}



h1 {
    max-width: 37.25rem;          /*35*/
    margin: 0 auto;               /*35*/
    padding: 1.5rem 1.25rem;      /*35*/
  }

  h1 .flex {                                /*36*/
    display: flex;                          /*36*/
    flex-direction: column-reverse;         /*36*/
    gap: 1rem;                              /*36*/
  }

  h1 .flex span:first-of-type {             /*37*/
    font-size: 0.7em;                       /*37*/
  }

  h1 .flex span:last-of-type {              /*38*/
    font-size: 1.2em;                       /*38*/
  }

  section {                                 /*39*/
    max-width: 40rem;                       /*39*/
    margin: 0 auto;                         /*39*/
    border: 2px solid #d0d0d5;            /*39*/
  }

  #years {
    display: flex;                                  /*40*/
    justify-content: flex-end;                      /*40*/
    position: sticky;                               /*40*/
    z-index: 999;                                   /*43*/
    top: 0;                                         /*40*/
    background-color: #0a0a23;                    /*41*/
    color: #fff;                                  /*41*/
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;   /*42*/
    margin: 0 -2px;                                 /*42*/
  }

  #years span[class] {                              /*44*/ 
    font-weight: bold;                              /*44*/ 
    width: 4.5rem;                                  /*44*/ 
    text-align: right;                              /*44*/ 
  }

  .table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;             /*45*/
  }

  table {
    border-collapse: collapse;                    /*49*/
    border: 0;                                    /*49*/  
    width: 100%;                                  /*50*/
    position: relative;                           /*50*/
    margin-top: 3rem;                                 /*50*/
  }

  table caption {
    color: #356eaf;                            /*51*/
    font-size: 1.3em;                            /*51*/
    font-weight: normal;                         /*51*/
    position: absolute;                          /*52*/
    top: -2.25rem;                               /*52*/
    left: 0.5rem;                                /*52*/

  }

  tbody td {
    width: 100vw;                                 /*53*/
    min-width: 4rem;                              /*53*/
    max-width: 4rem;                              /*53*/
  }

  tbody th {
  width: calc(100% - 12rem);                      /*54*/
  
}

tr[class="total"] {
  border-bottom: 4px double #0a0a23;                 /*55*/
  font-weight: bold;                            /*55*/
}

tr[class="total"] th {
  text-align: left;                             /*56*/
  padding: 0.5rem 0 0.25rem 0.5rem;             /*56*/
}

tr.total td {
  text-align: right;                            /*57*/
  padding: 0 0.25rem;                           /*57*/
}

tr.total td:nth-of-type(3) {                    /*58*/
  padding: 0.5rem;                              /*58*/
}

tr.total:hover {                                /*59*/
  background-color: #99c9ff;                  /*59*/
}

td.current {
  font-style: italic;                            /*60*/
}

tr.data {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);    /*61*/
}

tr.data td {
  vertical-align: top;                                      /*65*/
  text-align: right;                                        /*65*/
  padding: 0.3rem 0.25rem 0;                                /*65*/
}

tr.data td:last-of-type {
  padding: 0.5rem;                                          /*66*/
}