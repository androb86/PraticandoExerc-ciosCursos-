/* /* Normalize seu modelo de caixa criando um seletor * e dê a ele com a propriedade box-sizing definida como border-box. */
* {
    box-sizing: border-box;
}

/* Remova a margem do elemento body, defina font-family como sans-serif e dê a ela uma background-color com o valor de #f5f6f7. */
body{
    font-family: sans-serif;
    background-color: #f5f6f7;
    margin: 0;
}

/* Alinhe o texto de .header no centro. Torne o texto maiúsculo usando a propriedade text-transform com uppercase como valor.
Dê a ele um espaçamento de 32px em todos os lados. Defina os valores de cor do fundo como #0a0a23 e do texto como #fff.
Adicione uma border-bottom com o valor de 4px solid #fdb347.
 */
.header{
    padding: 32px; /*apartir daqui fiz com que o texto ficasse com espaçamento na parte superior, inferior, esquerdo e direito*/
    margin: 32px 32px 32px 32px; 
    text-align: center; /*apartir daqui centralizei o texto*/
    text-transform: uppercase; /* apartir daqui deixei a letra em maiuscula;*/
    color: #fff; /*apartir daqui transformei a cor do texto para branco*/
    background-color: #0a0a23; /*apartir daqui inserir a cor de fundo*/
    border-bottom: 4px solid #fdb347; /*apartir daqui adicionei uma pequena borda na parter inferior de 4px e uma cor*/
}

/*Flexbox é um layout de CSS unidimensional que pode controlar a forma como os itens são espaçados e alinhados dentro de um contêiner.
Para usá-lo, dê a um elemento uma propriedade display de flex. Isto fará do elemento um contêiner flex. Todos os filhos direto de um contêiner flex são chamados de itens flex.
Crie um seletor .gallery e torne-o um contêiner flex.*/
.gallery {
    display: flex; /*apartir daqui, as fotos ficaram alinhadas todas na horizontal*/
    
    /* O Flexbox tem um eixo principal e um eixo cruzado. O eixo principal é definido pela propriedade flex-direction, que tem quatro valores possíveis:

    row (padrão): eixo horizontal com os itens flex items da esquerda para a direita
    row-reverse: eixo horizontal com os itens flex da direita para a esquerda
    column: eixo vertical com os itens flex de cima para baixo
    column-reverse: eixo vertical com os itens flex de baixo para cima
    
    Observação: os eixos e direções serão diferentes, dependendo da direção do texto. Os valores mostrados são para uma direção de texto da esquerda para a direita.
    Experimente os diferentes valores para ver como eles afetam o layout.
    Quando estiver pronto, defina explicitamente uma flex-direction de row no elemento .gallery. */

    flex-direction: row;

    /* A propriedade flex-wrap determina como os itens flex se comportam quando o contêiner flex for muito pequeno. 
    Defini-la como wrap permitirá que os itens sejam associados à próxima linha ou coluna. nowrap (padrão) 
    impedirá que os itens sejam associados ou que encolham, se necessário.
    Faça com que seus itens flex sejam associados à próxima linha quando eles ficarem sem espaço. */

    flex-wrap: wrap; /*apartir daqui as fotos ficaram alinhadas para proximas linhas, organizadas*/ 

   /*  A propriedade justify-content determina como os itens dentro de um contêiner flex são posicionados no eixo principal, 
    afetando a posição e o espaço ao seu redor.
    Dê ao seletor .gallery a propriedade justify-content com o valor de center. */

    justify-content: center; /*apartir daqui as fotos tiveram um espaçamento nos lados, ficando ajustado no centro*/

    /* A propriedade align-items posiciona o conteúdo do flex ao longo do eixo transversal. Neste caso, 
    com flex-direction definido como row, o eixo cruzado seria vertical.
    Para centralizar as imagens na vertical, dê ao seletor .gallery uma propriedade align-items definida como center.
 */

    align-items: center;

/* Dê ao seletor .gallery uma propriedade padding definida como 20px 10px para criar algum espaço em torno do contêiner.
    Então, dê a ele uma max-width de 1400px e adicione uma margin de 0 auto para centralizá-la.
 */

   padding: 20px 10px;
   max-width: 1400px;
   margin: 0 auto;

    /*Suas imagens precisam de espaço entre elas.

    A propriedade abreviada gap do CSS define as lacunas (gaps), também conhecidas como calhas, entre as linhas e as colunas. 
    A propriedade gap e suas subpropriedades row-gap e column-gap fornecem essa funcionalidade para layouts flex, grid e multicolunas. 
    Você aplica a propriedade ao elemento contêiner.
    Dê ao seu contêiner flex .gallery uma propriedade gap com o valor 16px. */

    gap: 16px;

}


/* As imagens são muito grandes. Crie um seletor .gallery img para localizar suas imagens. 
Dê a elas uma width de 100% e uma max-width de 350px para que encolham conforme necessário, mas não fiquem muito grandes.
Também defina a propriedade height para 300px para manter suas imagens com um tamanho uniforme. */
.gallery img {
    width: 100%;
    max-width: 350px;
    height:300px;
    
    /* Observe como algumas de suas imagens ficaram distorcidas. Isto ocorre porque as imagens têm proporções diferentes. 
    Em vez de definir cada proporção individualmente, você pode usar a propriedade object-fit para determinar como as imagens devem se comportar.
    Dê ao seletor .gallery img a propriedade object-fit com o valor cover. Isto informará a imagem que ela deve 
    preencher o contêiner img enquanto mantém a proporção, resultando em um corte para o ajuste. */

    object-fit: cover;
    border-radius: 10px; /*suavizando as bordas*/

} 

/* O pseudoelemento ::after cria um elemento que é o último filho do elemento selecionado. 
Você pode usá-lo para adicionar um elemento vazio após a última imagem. 
Se você der a esse elemento a mesma width das imagens, 
ele empurrará a última imagem para a esquerda quando a galeria estiver em um layout de duas colunas. 
Neste momento, ele está no centro porque você definiu justify-content: center no contêiner flex.

Exemplo:

.container::after {
  content: "";
  width: 860px;
}
Crie um novo seletor usando um pseudoelemento ::after no elemento .gallery. 
Adicione uma propriedade content definida como uma string vazia "" e defina 350px como o valor da propriedade width. */

.gallery::after {
    content: "";
    width: 350px;

}